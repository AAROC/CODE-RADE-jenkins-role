---
# pull in the config from the repo
# The config repo is private, so we need to pass user name and password
- name: Config Backup
  file:
    path: "{{ config_backup_dir }}"
    state: directory
    owner: jenkins
    group: jenkins

- name: Config Staging Ground
  file:
    path: "{{ config_staging_dir }}"
    state: directory
    owner: jenkins
    group: jenkins

- name: Pull in Jenkins config
  git:
    repo: "https://{{ github_user }}:{{ github_token }}@github.com/AAROC/JenkinsConfig.git"
    dest: "{{ config_staging_dir }}"
    clone: yes
    version: FR2

- name: Ensure the right permissions
  file:
    path: "{{ config_staging_dir }}"
    owner: jenkins
    group: jenkins
    recurse: true

- block:
  - name: check that config is there
    stat:
      path: "{{ jenkins_home }}/config.xml"
    register: existing_jenkins_config

  - name: back up config
    shell: "cp {{ jenkins_home }}/config.xml {{ config_backup_dir }}/config.xml.{{ date }}"
    when: existing_jenkins_config.stat.exists
  - name: pull in new config
    shell: "cp -f {{ config_staging_dir }}/config.xml {{ jenkins_home }}/config.xml"
  - name: reset the github client id
    replace:
      dest: "{{ jenkins_home }}/config.xml"
      regexp: a49338da84820556f85c
      replace: "{{ github_oauth_client_id }}"
  - name: replace github client secret
    replace:
      dest: "{{ jenkins_home }}/config.xml"
      regexp: 5ed1dc28784ed766ade9ba18e63ecff48ab9ab81
      replace: "{{ github_oauth_client_secret }}"

- block:
  - name: pull in plugin configs
    shell: "cp {{ config_staging_dir }}/{{ item }} -f {{ jenkins_home }}/{{ item }}"
    with_items: "{{ jenkins_plugin_configs }}"
    notify: restart jenkins service

- block:
  - name: Pull in sidebar links
    shell: "cp {{ config_staging_dir }}/sidebar-link.xml -f {{ jenkins_home}}/sidebar-link.xml"
